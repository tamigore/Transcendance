// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  email      String     @unique
  username   String     @unique
  hash       String
  hashRt     String?
  chatSocket String?
  gameSocket String?
  loggedIn   Boolean    @default(false)
  bio        String?
  img        String? // img number or url
  twoFA      String?
  friend     User[]     @relation("UserFriend")
  friendBy   User[]     @relation("UserFriend")
  blocked    User[]     @relation("UserBlocked")
  blockedBy  User[]     @relation("UserBlocked")
  owner      Room[]     @relation(name: "owner")
  admin      Room[]     @relation(name: "admin")
  rooms      Room[]     @relation(name: "users")
  ban        Room[]    @relation(name: "ban")
  mute       Room[]    @relation(name: "mute")
  messages   Message[]
  player1    Game[]     @relation(name: "player1")
  player2    Game[]     @relation(name: "player2")
  spectator  Game[]     @relation(name: "spectator")
  win        Historic[] @relation(name: "winner")
  loose      Historic[] @relation(name: "looser")
  ingame     Boolean    @default(false)
  inqueue    Boolean    @default(false)
  @@map("users")
}

model Historic {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  winnerID Int
  winner   User   @relation(name: "winner", fields: [winnerID], references: [id])
  looserID Int
  looser   User   @relation(name: "looser", fields: [looserID], references: [id])
  score    String
  gameId   Int    @unique
  game     Game   @relation(fields: [gameId], references: [id])

  @@map("historics")
}

model Game {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name      String
  isBlocked Boolean @default(false)
  player1Id Int
  player1   User      @relation(name: "player1", fields: [player1Id], references: [id])
  player2Id Int?
  player2   User?      @relation(name: "player2", fields: [player2Id], references: [id])
  spectator User[]    @relation(name: "spectator")
  historic  Historic?

  @@map("games")
}

model Message {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  text   String
  roomId Int
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Room {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  name        String    @unique()
  private     Boolean   @default(false)
  hash        String?
  ownerId     Int?
  owner       User?     @relation(name: "owner", fields: [ownerId], references: [id], onDelete: SetNull)
  admins      User[]    @relation(name: "admin")
  users       User[]    @relation(name: "users")
  ban         User[]    @relation(name: "ban")
  mute        User[]    @relation(name: "mute")
  messages    Message[]

  @@map("rooms")
}
